{"version":3,"file":"ngx-breadcrumbs.umd.min.js","sources":["../../../../../../node_modules/tslib/tslib.es6.js","../../../../../../node_modules/rxjs/src/internal/util/isFunction.ts","../../../../../../node_modules/rxjs/src/internal/config.ts","../../../../../../node_modules/rxjs/src/internal/util/hostReportError.ts","../../../../../../node_modules/rxjs/src/internal/Observer.ts","../../../../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../../../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../../../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../../../../node_modules/rxjs/src/internal/Subscription.ts","../../../../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../../../../node_modules/rxjs/src/internal/Observable.ts","../../../../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../../../../node_modules/rxjs/src/internal/util/canReportError.ts","../../../../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../../../../node_modules/rxjs/src/internal/Subject.ts","../../../../../../node_modules/rxjs/src/internal/operators/refCount.ts","../../../../../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../../../../../node_modules/rxjs/src/internal/operators/groupBy.ts","../../../../../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/Action.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/QueueAction.ts","../../../../../../node_modules/rxjs/src/internal/Scheduler.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/queue.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts","../../../../../../node_modules/rxjs/src/internal/observable/empty.ts","../../../../../../node_modules/rxjs/src/internal/util/isScheduler.ts","../../../../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../../../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../../../../../node_modules/rxjs/src/internal/observable/of.ts","../../../../../../node_modules/rxjs/src/internal/observable/scalar.ts","../../../../../../node_modules/rxjs/src/internal/observable/throwError.ts","../../../../../../node_modules/rxjs/src/internal/Notification.ts","../../../../../../node_modules/rxjs/src/internal/operators/observeOn.ts","../../../../../../node_modules/rxjs/src/internal/ReplaySubject.ts","../../../../../../node_modules/rxjs/src/internal/util/Immediate.ts","../../../../../../node_modules/rxjs/src/internal/AsyncSubject.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/AsapAction.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/asap.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/async.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/animationFrame.ts","../../../../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts","../../../../../../node_modules/rxjs/src/internal/util/identity.ts","../../../../../../node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts","../../../../../../node_modules/rxjs/src/internal/util/EmptyError.ts","../../../../../../node_modules/rxjs/src/internal/operators/map.ts","../../../../../../node_modules/rxjs/src/internal/OuterSubscriber.ts","../../../../../../node_modules/rxjs/src/internal/InnerSubscriber.ts","../../../../../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../../../../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../../../../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../../../../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../../../../../node_modules/rxjs/src/internal/util/isPromise.ts","../../../../../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../../../../../node_modules/rxjs/src/internal/util/subscribeToResult.ts","../../../../../../node_modules/rxjs/src/internal/observable/combineLatest.ts","../../../../../../node_modules/rxjs/src/internal/observable/from.ts","../../../../../../node_modules/rxjs/src/internal/util/isInteropObservable.ts","../../../../../../node_modules/rxjs/src/internal/observable/fromObservable.ts","../../../../../../node_modules/rxjs/src/internal/observable/fromPromise.ts","../../../../../../node_modules/rxjs/src/internal/util/isIterable.ts","../../../../../../node_modules/rxjs/src/internal/observable/fromIterable.ts","../../../../../../node_modules/rxjs/src/internal/operators/mergeMap.ts","../../../../../../node_modules/rxjs/src/internal/operators/concatAll.ts","../../../../../../node_modules/rxjs/src/internal/operators/mergeAll.ts","../../../../../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../../../../../node_modules/rxjs/src/internal/observable/race.ts","../../../../../../node_modules/rxjs/src/internal/observable/zip.ts","~/ngx-breadcrumbs/src/mc-breadcrumbs.shared.ts","~/ngx-breadcrumbs/src/service/mc-breadcrumbs.config.ts","~/ngx-breadcrumbs/src/service/mc-breadcrumbs.resolver.ts","../../../../../../node_modules/rxjs/src/internal/operators/bufferTime.ts","../../../../../../node_modules/rxjs/src/internal/operators/audit.ts","../../../../../../node_modules/rxjs/src/internal/operators/buffer.ts","../../../../../../node_modules/rxjs/src/internal/operators/bufferCount.ts","../../../../../../node_modules/rxjs/src/internal/operators/bufferToggle.ts","../../../../../../node_modules/rxjs/src/internal/operators/bufferWhen.ts","../../../../../../node_modules/rxjs/src/internal/operators/catchError.ts","../../../../../../node_modules/rxjs/src/internal/operators/concat.ts","../../../../../../node_modules/rxjs/src/internal/observable/concat.ts","../../../../../../node_modules/rxjs/src/internal/operators/count.ts","../../../../../../node_modules/rxjs/src/internal/operators/debounce.ts","../../../../../../node_modules/rxjs/src/internal/operators/debounceTime.ts","../../../../../../node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","../../../../../../node_modules/rxjs/src/internal/operators/delay.ts","../../../../../../node_modules/rxjs/src/internal/operators/delayWhen.ts","../../../../../../node_modules/rxjs/src/internal/operators/dematerialize.ts","../../../../../../node_modules/rxjs/src/internal/operators/distinct.ts","../../../../../../node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts","../../../../../../node_modules/rxjs/src/internal/operators/filter.ts","../../../../../../node_modules/rxjs/src/internal/operators/tap.ts","../../../../../../node_modules/rxjs/src/internal/operators/throwIfEmpty.ts","../../../../../../node_modules/rxjs/src/internal/operators/take.ts","../../../../../../node_modules/rxjs/src/internal/operators/every.ts","../../../../../../node_modules/rxjs/src/internal/operators/exhaust.ts","../../../../../../node_modules/rxjs/src/internal/operators/exhaustMap.ts","../../../../../../node_modules/rxjs/src/internal/operators/expand.ts","../../../../../../node_modules/rxjs/src/internal/operators/finalize.ts","../../../../../../node_modules/rxjs/src/internal/operators/find.ts","../../../../../../node_modules/rxjs/src/internal/operators/first.ts","../../../../../../node_modules/rxjs/src/internal/operators/ignoreElements.ts","../../../../../../node_modules/rxjs/src/internal/operators/isEmpty.ts","../../../../../../node_modules/rxjs/src/internal/operators/takeLast.ts","../../../../../../node_modules/rxjs/src/internal/operators/mapTo.ts","../../../../../../node_modules/rxjs/src/internal/operators/materialize.ts","../../../../../../node_modules/rxjs/src/internal/operators/scan.ts","../../../../../../node_modules/rxjs/src/internal/operators/mergeScan.ts","../../../../../../node_modules/rxjs/src/internal/operators/onErrorResumeNext.ts","../../../../../../node_modules/rxjs/src/internal/operators/pairwise.ts","../../../../../../node_modules/rxjs/src/internal/operators/repeat.ts","../../../../../../node_modules/rxjs/src/internal/operators/repeatWhen.ts","../../../../../../node_modules/rxjs/src/internal/operators/retry.ts","../../../../../../node_modules/rxjs/src/internal/operators/retryWhen.ts","../../../../../../node_modules/rxjs/src/internal/operators/sample.ts","../../../../../../node_modules/rxjs/src/internal/operators/sampleTime.ts","../../../../../../node_modules/rxjs/src/internal/operators/sequenceEqual.ts","../../../../../../node_modules/rxjs/src/internal/operators/single.ts","../../../../../../node_modules/rxjs/src/internal/operators/skip.ts","../../../../../../node_modules/rxjs/src/internal/operators/skipLast.ts","../../../../../../node_modules/rxjs/src/internal/operators/skipUntil.ts","../../../../../../node_modules/rxjs/src/internal/operators/skipWhile.ts","../../../../../../node_modules/rxjs/src/internal/observable/SubscribeOnObservable.ts","../../../../../../node_modules/rxjs/src/internal/util/isNumeric.ts","../../../../../../node_modules/rxjs/src/internal/operators/switchMap.ts","../../../../../../node_modules/rxjs/src/internal/operators/takeUntil.ts","../../../../../../node_modules/rxjs/src/internal/operators/takeWhile.ts","../../../../../../node_modules/rxjs/src/internal/operators/throttle.ts","../../../../../../node_modules/rxjs/src/internal/operators/throttleTime.ts","../../../../../../node_modules/rxjs/src/internal/operators/timeoutWith.ts","../../../../../../node_modules/rxjs/src/internal/operators/toArray.ts","../../../../../../node_modules/rxjs/src/internal/operators/reduce.ts","../../../../../../node_modules/rxjs/src/internal/operators/window.ts","../../../../../../node_modules/rxjs/src/internal/operators/windowCount.ts","../../../../../../node_modules/rxjs/src/internal/operators/windowTime.ts","../../../../../../node_modules/rxjs/src/internal/operators/windowToggle.ts","../../../../../../node_modules/rxjs/src/internal/operators/windowWhen.ts","../../../../../../node_modules/rxjs/src/internal/operators/withLatestFrom.ts","~/ngx-breadcrumbs/src/service/mc-breadcrumbs.service.ts","~/ngx-breadcrumbs/src/component/mc-breadcrumbs.component.ts","~/ngx-breadcrumbs/src/mc-breadcrumbs.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nfunction UnsubscriptionErrorImpl(this: any, errors: any[]) {\n  Error.call(this);\n  this.message = errors ?\n  `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n  this.name = 'UnsubscriptionError';\n  this.errors = errors;\n  return this;\n}\n\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber =\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  private _parentSubscription: Subscription | null = null;\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    this._parentSubscription = null;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nfunction ObjectUnsubscribedErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'object unsubscribed';\n  this.name = 'ObjectUnsubscribedError';\n  return this;\n}\n\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observables. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * ![](groupBy.png)\n *\n * When the Observable emits an item, a key is computed for this item with the keySelector function.\n *\n * If a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Elsewhere, a new\n * {@link GroupedObservable} for this key is created and emits.\n *\n * A {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\n * key is available as the key field of a {@link GroupedObservable} instance.\n *\n * The elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\n * returned by the elementSelector function.\n *\n * ## Examples\n * ### Group objects by id and return as array\n * ```javascript\n * import { mergeMap, groupBy } from 'rxjs/operators';\n * import { of } from 'rxjs/observable/of';\n *\n * interface Obj {\n *    id: number,\n *    name: string,\n * }\n *\n * of<Obj>(\n *   {id: 1, name: 'javascript'},\n *   {id: 2, name: 'parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'typescript'},\n *   {id: 3, name: 'tslint'}\n * ).pipe(\n *   groupBy(p => p.id),\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'javascript'},\n * //   { id: 1, name: 'typescript'} ]\n * //\n * // [ { id: 2, name: 'parcel'},\n * //   { id: 2, name: 'webpack'} ]\n * //\n * // [ { id: 3, name: 'tslint'} ]\n * ```\n *\n * ### Pivot data on the id field\n * ```javascript\n * import { mergeMap, groupBy, map } from 'rxjs/operators';\n * import { of } from 'rxjs/observable/of';\n *\n * of<Obj>(\n *   {id: 1, name: 'javascript'},\n *   {id: 2, name: 'parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'typescript'}\n *   {id: 3, name: 'tslint'}\n * ).pipe(\n *   groupBy(p => p.id, p => p.name),\n *   mergeMap( (group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))),\n *   map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)})),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'javascript', 'typescript' ] }\n * // { id: 2, values: [ 'parcel', 'webpack' ] }\n * // { id: 3, values: [ 'tslint' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    clearInterval(id);\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /**\n   * Note: the extra arrow function wrapper is to make testing by overriding\n   * Date.now easier.\n   * @nocollapse\n   */\n  public static now: () => number = () => Date.now();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```javascript\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```javascript\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using {@link index/EMPTY} constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```javascript\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: 10'\n * // 'next: 20'\n * // 'next: 30'\n *\n * ```\n *\n * Emit the array `[1,2,3]`\n *\n * ```javascript\n * of([1,2,3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: [1,2,3]'\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n * @method of\n * @owner Observable\n */\n\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```javascript\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13\n * ```javascript\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```javascript\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const destination = this.destination as Subscription;\n    destination.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * A variant of Subject that \"replays\" or emits old values to new subscribers.\n * It buffers a set number of values and will emit those values immediately to\n * any new subscribers in addition to emitting new values to existing subscribers.\n *\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    const _events = this._events;\n    _events.push(value);\n    // Since this method is invoked in every next() call than the buffer\n    // can overgrow the max size only by one item\n    if (_events.length > this._bufferSize) {\n      _events.shift();\n    }\n\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    this._events.push(new ReplayEvent(this._getNow(), value));\n    this._trimBufferThenGetEvents();\n\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","let nextHandle = 1;\n\nconst tasksByHandle: { [handle: string]: () => void } = {};\n\nfunction runIfPresent(handle: number) {\n  const cb = tasksByHandle[handle];\n  if (cb) {\n    cb();\n  }\n}\n\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    tasksByHandle[handle] = cb;\n    Promise.resolve().then(() => runIfPresent(handle));\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    delete tasksByHandle[handle];\n  },\n};\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```javascript\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```javascript\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```javascript\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @nodoc\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```javascript\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n * ```\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","export interface ArgumentOutOfRangeError extends Error {\n}\n\nexport interface ArgumentOutOfRangeErrorCtor {\n  new(): ArgumentOutOfRangeError;\n}\n\nfunction ArgumentOutOfRangeErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'argument out of range';\n  this.name = 'ArgumentOutOfRangeError';\n  return this;\n}\n\nArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor = ArgumentOutOfRangeErrorImpl as any;","export interface EmptyError extends Error {\n}\n\nexport interface EmptyErrorCtor {\n  new(): EmptyError;\n}\n\nfunction EmptyErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'no elements in sequence';\n  this.name = 'EmptyError';\n  return this;\n}\n\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination?: Subscriber<any>\n): Subscription;\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)\n): Subscription | void {\n  if (destination.closed) {\n    return;\n  }\n  return subscribeTo(result)(destination);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```javascript\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * ### Combine an array of Observables\n * ```javascript\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use project function to dynamically calculate the Body-Mass Index\n * ```javascript\n * * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest(weight, height).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    SchedulerLike>): Observable<R> {\n  let resultSelector: (...values: Array<any>) => R =  null;\n  let scheduler: SchedulerLike = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <SchedulerLike>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator<T, R>(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike } from '../types';\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n * ### Converts an array to an Observable\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10 20 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n * ```javascript\n * import { take } from 'rxjs/operators';\n * import { from } from 'rxjs/observable/from';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3 6 12 24 48 96 192 384 768 1536\n * ```\n *\n * ---\n *\n * ### with async scheduler\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n * import { async } from 'rxjs/scheduler/async';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, async);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start end 10 20 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n * @see {@link fromPromise}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function fromObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToObservable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => {\n        const observable: Subscribable<T> = input[Symbol_observable]();\n        sub.add(observable.subscribe({\n          next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n          error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n          complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\n\nexport function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToPromise(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => input.then(\n        value => {\n          sub.add(scheduler.schedule(() => {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(() => subscriber.complete()));\n          }));\n        },\n        err => {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )));\n      return sub;\n    });\n  }\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\n\nexport function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  if (!scheduler) {\n    return new Observable<T>(subscribeToIterable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let iterator: Iterator<T>;\n      sub.add(() => {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(() => {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n          let value: T;\n          let done: boolean;\n          try {\n            const result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```javascript\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    subscribeToResult<T, R>(this, ish, value, index, innerSubscriber);\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function concatAll<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.png)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev => interval(1000).pipe(take(4))),\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T> {\n  return mergeAll<T>(1);\n}\n","\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput } from '../types';\n\nexport function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap<T, T>(identity as (value: T, index: number) => ObservableInput<T>, concurrent);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\n// forkJoin([a$, b$, c$]);\nexport function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\n\n// forkJoin(a$, b$, c$)\nexport function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * ## Examples\n * ### Use forkJoin with operator emitting immediately\n * ```javascript\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n * ```\n *\n * ### Use forkJoin with operator emitting after some time\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with project function\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * ).pipe(\n *   map(([n, m]) => n + m),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin<T>(\n  ...sources: Array<ObservableInput<T> | ObservableInput<T>[] | Function>\n): Observable<T[]> {\n\n  let resultSelector: Function;\n  if (typeof sources[sources.length - 1] === 'function') {\n    // DEPRECATED PATH\n    resultSelector = sources.pop() as Function;\n  }\n\n  // if the first and only other argument is an array\n  // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0] as Array<ObservableInput<T>>;\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return forkJoin(sources).pipe(\n      map(args => resultSelector(...args))\n    );\n  }\n\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources as Array<ObservableInput<T>>);\n  });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T, R> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private values: T[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<R>,\n              private sources: Array<ObservableInput<T>>) {\n    super(destination);\n\n    const len = sources.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(innerSub as any)._hasValue) {\n      (innerSub as any)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const { destination, haveValues, values } = this;\n    const len = values.length;\n\n    if (!(innerSub as any)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```javascript\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable as any, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../Observable';\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { ObservableInput, PartialObserver } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\n\nexport function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n * Combine age and name from different sources\n * ```javascript\n * let age$ = of<number>(27, 25, 29);\n * let name$ = of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = of<boolean>(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map((age: number, name: string, isDev: boolean) => ({ age, name, isDev })),\n * )\n * .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const resultSelector = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  resultSelector: (...values: Array<any>) => R;\n\n  constructor(resultSelector?: (...values: Array<any>) => R) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private resultSelector: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              resultSelector?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    this.unsubscribe();\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        const destination = this.destination as Subscription;\n        destination.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryresultSelector(args: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of, from } from 'rxjs';\n\n// Angular makes it impossible to make modules optional :(\n\n// try {\n//   const _ = r('lodash');\n//   _template = _.template;\n//   _templateSettings = _.templateSetting\n// } catch (e) {\n//   try {\n//     _template = r('lodash.template');\n//     _templateSettings = r('lodash.templatesettings');\n//   } catch (e) {\n//     _template = (y) => (x) => y;\n//     _templateSettings = {};\n//   }\n// } finally {\n//   _templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n// }\n\nimport * as template from 'lodash.template';\nimport * as templateSettings from 'lodash.templatesettings';\n\nconst _ = {\n  template: template,\n  templateSettings: templateSettings\n};\n\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n\nexport interface IBreadcrumb {\n  text: string;\n  path: string;\n}\n\ndeclare var require: any;\n\nfunction r(module) {\n  return require(`${name}`);\n}\n\nexport function stringFormat(template: string, binding: any): string {\n  const compiled = _.template(template);\n  return compiled(binding);\n}\n\nexport function isPromise(value: any): boolean {\n  return value && (typeof value.then === 'function');\n}\n\nexport function wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>)\n  : Observable<T> {\n\n  if (value instanceof Observable) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value as T);\n}\n","import { Observable } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\n\nexport interface IPostProcessFunc {\n  (crumbs: IBreadcrumb[]) : Promise<IBreadcrumb[]> | Observable<IBreadcrumb[]> | IBreadcrumb[];\n}\n\n@Injectable()\nexport class McBreadcrumbsConfig {\n  postProcess : IPostProcessFunc\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, UrlSegment } from '@angular/router';\nimport { IBreadcrumb, stringFormat } from '../mc-breadcrumbs.shared';\nimport { Observable, of } from 'rxjs';\n\n\nexport class McBreadcrumbsResolver implements Resolve<IBreadcrumb[]> {\n  public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n     : Observable<IBreadcrumb[]> | Promise<IBreadcrumb[]> | IBreadcrumb[] {\n\n    const data = route.routeConfig.data;\n    const path = this.getFullPath(route);\n\n    let text = typeof (data.breadcrumbs) === 'string' ? data.breadcrumbs : data.breadcrumbs.text || data.text || path;\n    text = stringFormat(text, route.data);\n\n    const crumbs: IBreadcrumb[] = [{\n      text: text,\n      path: path\n    }];\n\n    return of(crumbs);\n  }\n\n  public getFullPath(route: ActivatedRouteSnapshot): string {\n    const relativePath = (segments: UrlSegment[]) => segments.reduce((a, v) => a += '/' + v.path, '');\n    const fullPath = (routes: ActivatedRouteSnapshot[]) => routes.reduce((a, v) => a += relativePath(v.url), '');\n\n    return fullPath(route.pathFromRoot);\n  }\n}\n","import { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerAction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * ![](bufferTime.png)\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * ## Examples\n *\n * Every second, emit an array of the recent click events\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(1000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds, emit the click events from the next 2 seconds\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(2000, 5000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: SchedulerLike = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ninterface DispatchCreateArg<T> {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number;\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface DispatchCloseArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: DispatchCreateArg<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule<DispatchCreateArg<T>>(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: SchedulerAction<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation<T>(this: SchedulerAction<DispatchCreateArg<T>>, state: DispatchCreateArg<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <SchedulerAction<DispatchCreateArg<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchCloseArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.png)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (!innerSubscription || innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const interval = interval(1000);\n * const buffered = interval.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction, SubscribableOrPromise } from '../types';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : empty()\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * ![](bufferWhen.png)\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * ## Example\n *\n * Emit an array of the last clicks every [1-5] random seconds\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferWhen(() =>\n *   interval(1000 + Math.random() * 4000)\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {ObservableInput, OperatorFunction, MonoTypeOperatorFunction} from '../types';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * ![](catch.png)\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n == 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n == 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n *  @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T>(selector: (err: any, caught: Observable<T>) => never): MonoTypeOperatorFunction<T>;\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R>;\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n      this.add(innerSubscriber);\n      subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n    }\n  }\n}\n","import {  concat as concatStatic } from '../observable/concat';\nimport { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @deprecated Deprecated in favor of static {@link concat}.\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | SchedulerLike)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```javascript\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate an array of 3 Observables\n * ```javascript\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const result = concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```javascript\n * const timer = interval(1000).pipe(take(2));\n * *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {SchedulerLike} [scheduler=null] An optional {@link SchedulerLike} to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll<R>()(of(...observables));\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer, OperatorFunction } from '../types';\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * ![](count.png)\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * ## Examples\n *\n * Counts how many seconds have passed before the first click happened\n * ```javascript\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\n * const result = secondsBeforeClick.pipe(count());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Counts how many odd numbers are there between 1 and 7\n * ```javascript\n * const numbers = range(1, 7);\n * const result = numbers.pipe(count(i => i % 2 === 1));\n * result.subscribe(x => console.log(x));\n * // Results in:\n * // 4\n * ```\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\n\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * ![](debounce.png)\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounce(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively if the duration selector Observable\n      // emits synchronously\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      const { lastValue } = this;\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively when scheduled with things like\n      // VirtualScheduler/TestScheduler.\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n * If no clicks happen in 5 seconds, then emit \"no clicks\"\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: SchedulerLike;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: SchedulerAction<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: SchedulerLike): void {\n    this.active = true;\n    const destination = this.destination as Subscription;\n    destination.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * ![](delayWhen.png)\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n * The completion of the notifier triggering the emission of the source value\n * is deprecated behavior and will be removed in future versions.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * ## Example\n * Delay each click by a random amount of time, between 0 and 5 seconds\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(\n *   delayWhen(event => interval(Math.random() * 5000)),\n * );\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T, index: number): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T, index: number) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T, index: number) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    try {\n      const delayNotifier = this.delayDurationSelector(value, index);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n    this.unsubscribe();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    if (subscriptionIdx !== -1) {\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n    }\n\n    return subscription.outerValue;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      const destination = this.destination as Subscription;\n      destination.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.unsubscribe();\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * ![](dematerialize.png)\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * ## Example\n * Convert an Observable of Notifications to an actual Observable\n * ```javascript\n * const notifA = new Notification('N', 'A');\n * const notifB = new Notification('N', 'B');\n * const notifE = new Notification('E', undefined,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * const materialized = of(notifA, notifB, notifE);\n * const upperCase = materialized.pipe(dematerialize());\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n * ```\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * ## Examples\n * A simple example with numbers\n * ```javascript\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(\n *     distinct(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n * ```\n *\n * An example using a keySelector function\n * ```typescript\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *   ).pipe(\n *     distinct((p: Person) => p.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * ```\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * ## Example\n * A simple example with numbers\n * ```javascript\n * of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4).pipe(\n *     distinctUntilChanged(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n * ```\n *\n * An example using a compare function\n * ```typescript\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'},\n *   ).pipe(\n *     distinctUntilChanged((p: Person, q: Person) => p.name === q.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * ![](do.png)\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `tap` is not subscribed, the side effects specified by the\n * Observer will never happen. `tap` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * ## Example\n * Map every click to the clientX position of that click, while also logging the click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(\n *   tap(ev => console.log(ev)),\n *   map(ev => ev.clientX),\n * );\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n * @see {@link Observable#subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n","import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n * ```javascript\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * ```\n *\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport const throwIfEmpty =\n  <T>(errorFactory: (() => any) = defaultErrorFactory) => tap<T>({\n    hasValue: false,\n    next() { this.hasValue = true; },\n    complete() {\n      if (!this.hasValue) {\n        throw errorFactory();\n      }\n    }\n  } as any);\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n * Take the first 5 seconds of an infinite 1-second interval Observable\n * ```javascript\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * ## Example\n * A simple example emitting true if all elements are less than 5, false otherwise\n * ```javascript\n *  of(1, 2, 3, 4, 5, 6).pipe(\n *     every(x => x < 5),\n * )\n * .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, TeardownLogic } from '../types';\n\nexport function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function exhaust<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * ![](exhaust.png)\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(5))),\n * );\n * const result = higherOrder.pipe(exhaust());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): OperatorFunction<any, T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * ![](exhaustMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   exhaustMap((ev) => interval(1000).pipe(take(5))),\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, I|R> {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      exhaustMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      )),\n    );\n  }\n  return (source: Observable<T>) =>\n    source.lift(new ExhauseMapOperator(project));\n}\n\nclass ExhauseMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ExhaustMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasSubscription = false;\n  private hasCompleted = false;\n  private index = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.hasSubscription = true;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<R>, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    subscribeToResult<T, R>(this, result, value, index, innerSubscriber);\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const destination = this.destination as Subscription;\n    destination.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n * Start emitting the powers of two on every click, at most 10 of them\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   mapTo(1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10),\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: SchedulerLike = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: ObservableInput<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        const destination = this.destination as Subscription;\n        destination.add(this.scheduler.schedule<DispatchArg<T, R>>(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    const destination = this.destination as Subscription;\n    destination.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    const destination = this.destination as Subscription;\n    destination.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {OperatorFunction} from '../types';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S | undefined>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): OperatorFunction<T, T | undefined>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * ![](find.png)\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * ## Example\n * Find and emit the first click that happens on a DIV element\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(find(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): OperatorFunction<T, T | undefined> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg)) as Observable<T | undefined>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T | number | undefined> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    const {predicate, thisArg} = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction } from '../../internal/types';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\n\n/* tslint:disable:max-line-length */\nexport function first<T, D = T>(\n  predicate?: null,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\nexport function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * ![](first.png)\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a deprecated `resultSelector` function to produce the output\n * value from the input value, and a `defaultValue` to emit in case the source\n * completes before it is able to emit a valid value. Throws an error if\n * `defaultValue` was not provided and a matching element is not found.\n *\n * ## Examples\n * Emit only the first click that happens on the DOM\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Emits the first click that happens on a DIV\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) => source.pipe(\n    predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n    take(1),\n    hasDefaultValue ? defaultIfEmpty<T | D>(defaultValue) : throwIfEmpty(() => new EmptyError()),\n  );\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * ## Examples\n * ### Ignores emitted values, reacts to observable's completion.\n * ```javascript\n * of('you', 'talking', 'to', 'me').pipe(\n *   ignoreElements(),\n * )\n * .subscribe(\n *   word => console.log(word),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'the end'\n * ```\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements(): OperatorFunction<any, never> {\n  return function ignoreElementsOperatorFunction(source: Observable<any>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    // Do nothing\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * ![](takeLast.png)\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * ## Example\n * Take the last 3 values of an Observable with many values\n * ```javascript\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n * Map every click to the string 'Hi'\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * ![](materialize.png)\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * ## Example\n * Convert a faulty Observable to an Observable of Notifications\n * ```javascript\n * const letters = of('a', 'b', 13, 'd');\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\n * const materialized = upperCase.pipe(materialize());\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n * ```\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * ![](scan.png)\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * ## Example\n * Count the number of click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const ones = clicks.pipe(mapTo(1));\n * const seed = 0;\n * const count = ones.pipe(scan((acc, one) => acc + one, seed));\n * count.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * ## Example\n * Count the number of click events\n * ```javascript\n * const click$ = fromEvent(document, 'click');\n * const one$ = click$.pipe(mapTo(1));\n * const seed = 0;\n * const count$ = one$.pipe(\n *   mergeScan((acc, one) => of(acc + one), seed),\n * );\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n * ```\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => ObservableInput<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => ObservableInput<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => ObservableInput<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    subscribeToResult<T, R>(this, ish, value, index, innerSubscriber);\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    const destination = this.destination as Subscription;\n    destination.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { from } from '../observable/from';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\n *\n *\n * ## Example\n * Subscribe to the next Observable after map fails\n * ```javascript\n * of(1, 2, 3, 0).pipe(\n *   map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   }),\n *   onErrorResumeNext(of(1, 2, 3)),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('that\\'s it!')\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return from(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n      const destination = this.destination as Subscription;\n      destination.add(innerSubscriber);\n      subscribeToResult(this, next, undefined, undefined, innerSubscriber);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n * On every click (starting from the second), emit the relative distance to the previous click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(pair => {\n *     const x0 = pair[0].clientX;\n *     const y0 = pair[0].clientY;\n *     const x1 = pair[1].clientX;\n *     const y1 = pair[1].clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   }),\n * );\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { empty } from '../observable/empty';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * ![](repeat.png)\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * ![](retryWhen.png)\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```javascript\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * ![](sampleTime.png)\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * ## Example\n * Every second, emit the most recent click at most once\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(sampleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: SchedulerAction<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * ![](sequenceEqual.png)\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * ## Example\n * figure out if the Konami code matches\n * ```javascript\n * const codes = from([\n *   'ArrowUp',\n *   'ArrowUp',\n *   'ArrowDown',\n *   'ArrowDown',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'KeyB',\n *   'KeyA',\n *   'Enter', // no start key, clearly.\n * ]);\n *\n * const keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\n * const matches = keys.pipe(\n *   bufferCount(11, 1),\n *   mergeMap(\n *     last11 => from(last11).pipe(sequenceEqual(codes)),\n *   ),\n * );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    (this.destination as Subscription).add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n    this.unsubscribe();\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n\n  completeB() {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.completeB();\n    this.unsubscribe();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\nimport { Observer, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * ![](single.png)\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * ![](skipLast.png)\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * ## Example\n * Skip the last 2 values of an Observable with many values\n * ```javascript\n * const many = range(1, 5);\n * const skipLastTwo = many.pipe(skipLast(2));\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n * ```\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic, ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * ![](skipUntil.png)\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(destination: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>, notifier: ObservableInput<any>) {\n    super(destination);\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    this.add(innerSubscriber);\n    this.innerSubscription = innerSubscriber;\n    subscribeToResult(this, notifier, undefined, undefined, innerSubscriber);\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n    if (this.innerSubscription) {\n      this.innerSubscription.unsubscribe();\n    }\n  }\n\n  notifyComplete() {\n    /* do nothing */\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { SchedulerLike, SchedulerAction } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  /** @nocollapse */\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: SchedulerLike = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  /** @nocollapse */\n  static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: SchedulerLike = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { isArray } from './isArray';\n\nexport function isNumeric(val: any): val is number | string {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n * Rerun an interval Observable on every click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    return (source: Observable<T>) => source.pipe(\n      switchMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii))\n      ))\n    );\n  }\n  return (source: Observable<T>) => source.lift(new SwitchMapOperator(project));\n}\n\nclass SwitchMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<R>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    this.innerSubscription = subscribeToResult(this, result, value, index, innerSubscriber);\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n    this.unsubscribe();\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const destination = this.destination as Subscription;\n    destination.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n      this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```javascript\n * const interval = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = interval.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n  seenValue = false;\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.seenValue = true;\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n * Emit click events only while the clientX property is greater than 200\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.png)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private _throttled: Subscription;\n  private _sendValue: T;\n  private _hasValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this._hasValue = true;\n    this._sendValue = value;\n\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  }\n\n  private send() {\n    const { _hasValue, _sendValue } = this;\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue);\n    }\n    this._hasValue = false;\n    this._sendValue = null;\n  }\n\n  private throttle(value: T): void {\n    const duration = this.tryDurationSelector(value);\n    if (duration) {\n      this.add(this._throttled = subscribeToResult(this, duration));\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  private throttlingDone() {\n    const { _throttled, _trailing } = this;\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n    this._throttled = null;\n\n    if (_trailing) {\n      this.send();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.throttlingDone();\n  }\n\n  notifyComplete(): void {\n    this.throttlingDone();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: SchedulerLike = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule<DispatchArg<T>>(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  protected _complete() {\n    if (this._hasTrailingValue) {\n      this.destination.next(this._trailingValue);\n      this.destination.complete();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * ![](timeoutWith.png)\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * ## Example\n * Add fallback observable\n * ```javascript\n * const seconds = interval(1000);\n * const minutes = interval(60 * 1000);\n *\n * seconds.pipe(timeoutWith(900, minutes))\n *   .subscribe(\n *     value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                  // since first value of `seconds` will not arrive fast enough.\n *     err => console.log(err),     // Would be called after 900ms in case of `timeout`,\n *                                  // but here will never be called.\n *   );\n * ```\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {SchedulerLike} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: SchedulerLike = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: SchedulerAction<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule<TimeoutWithSubscriber<T, R>>(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../types';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * ![](reduce.png)\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * ## Example\n * Count the number of click events that happened in 5 seconds\n * ```javascript\n * const clicksInFiveSeconds = fromEvent(document, 'click').pipe(\n *   takeUntil(interval(5000)),\n * );\n * const ones = clicksInFiveSeconds.pipe(mapTo(1));\n * const seed = 0;\n * const count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(\n      scan((acc: R, value: T, index: number): R => accumulator(acc, value, index + 1)),\n      takeLast(1),\n    )(source);\n  };\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const interval = interval(1000);\n * const result = clicks.pipe(\n *   window(interval),\n *   map(win => win.take(2)), // each window has at most 2 emissions\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n * Ignore every 3rd click event, starting from the first one\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3)),\n *   map(win => win.skip(1)), // skip first of every 3 clicks\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerLike, SchedulerAction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowTime.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * ## Examples\n * In every window of 1 second each, emit at most 2 click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000),\n *   map(win => win.take(2)),   // each window has at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000),\n *   map(win => win.take(2)),   // each window has at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Same as example above but with maxWindowCount instead of take\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000, 2), // each window has still at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: SchedulerLike = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: SchedulerAction<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule<CreationState<T>>(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule<TimeSpanOnlyState<T>>(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: SchedulerAction<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: SchedulerAction<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : empty()),\n *   mergeAll(),\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings as any));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowWhen.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * ## Example\n * Emit only the first two clicks events in every window of [1-5] random seconds\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowWhen(() => interval(1000 + Math.random() * 4000)),\n *   map(win => win.pipe(take(2))),     // each window has at most 2 emissions\n *   mergeAll(),                        // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n * On every click event, emit an array with the latest timer event plus the click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, NavigationEnd, Router, RouterState } from '@angular/router';\n\nimport { Observable, BehaviorSubject, Subscription, of } from 'rxjs';\n\nimport { IBreadcrumb, stringFormat, wrapIntoObservable } from '../mc-breadcrumbs.shared';\nimport { McBreadcrumbsConfig } from './mc-breadcrumbs.config';\nimport { McBreadcrumbsResolver } from './mc-breadcrumbs.resolver';\nimport { filter, flatMap, distinct, toArray, first, concat } from 'rxjs/operators';\n\n@Injectable()\nexport class McBreadcrumbsService {\n\n  private _breadcrumbs = new BehaviorSubject<IBreadcrumb[]>([]);\n  private _defaultResolver = new McBreadcrumbsResolver();\n\n  constructor(private _router: Router, route: ActivatedRoute, private _config: McBreadcrumbsConfig, private _injector: Injector) {\n\n    this._router.events\n      .pipe(filter((x) => x instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n\n        const currentRoot = _router.routerState.snapshot.root;\n\n        // Observable.of(this._config.prefixCrumbs)\n        this._resolveCrumbs(currentRoot).pipe(\n          flatMap((x) => x),\n          distinct((x) => x.text),\n          toArray(),\n          flatMap((x) => {\n            if (this._config.postProcess) {\n              const y = this._config.postProcess(x);\n              return wrapIntoObservable<IBreadcrumb[]>(y).pipe(first());\n            } else {\n              return of(x);\n            }\n          }))\n          .subscribe((x) => {\n            this._breadcrumbs.next(x);\n          });\n      });\n  }\n\n  get crumbs$(): Observable<IBreadcrumb[]> {\n    return this._breadcrumbs;\n  }\n\n  private _resolveCrumbs(route: ActivatedRouteSnapshot)\n    : Observable<IBreadcrumb[]> {\n\n    let crumbs$: Observable<IBreadcrumb[]>;\n\n    const data = route.routeConfig &&\n      route.routeConfig.data;\n\n    if (data && data.breadcrumbs) {\n\n      let resolver: McBreadcrumbsResolver;\n\n      if (data.breadcrumbs.prototype instanceof McBreadcrumbsResolver) {\n        resolver = this._injector.get(data.breadcrumbs);\n      } else {\n        resolver = this._defaultResolver;\n      }\n\n      const result = resolver.resolve(route, this._router.routerState.snapshot);\n      crumbs$ = wrapIntoObservable<IBreadcrumb[]>(result).pipe(first());\n\n    } else {\n      crumbs$ = of([]);\n    }\n\n    if (route.firstChild) {\n      crumbs$ = crumbs$.pipe(concat(this._resolveCrumbs(route.firstChild)));\n    }\n\n    return crumbs$;\n  }\n}\n","import { Observable, Subscription } from 'rxjs';\nimport { McBreadcrumbsService } from '../service/mc-breadcrumbs.service';\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\n\n@Component({\n  selector: 'mc-breadcrumbs',\n  template: `\n    <ol *ngIf=\"crumbs.length\" class=\"breadcrumb\">\n      <li *ngFor=\"let crumb of crumbs; let last = last\" [ngClass]=\"{ 'active': last }\" class=\"breadcrumb-item\">\n        <a *ngIf=\"!last\" [routerLink]=\"crumb.path\">{{ crumb.text }}</a>\n        <span *ngIf=\"last\">{{ crumb.text }}</span>\n      </li>\n    </ol>\n  `\n})\nexport class McBreadcrumbsComponent implements OnInit, OnDestroy {\n  constructor(public service: McBreadcrumbsService) {}\n\n  crumbs: IBreadcrumb[];\n\n  subscriptions = new Array<Subscription>();\n\n  public ngOnInit(): void {\n\n    const s = this.service.crumbs$.subscribe((x) => {\n      this.crumbs = x;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((x) => x.unsubscribe());\n  }\n\n}\n","import { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { McBreadcrumbsService } from './service/mc-breadcrumbs.service';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { McBreadcrumbsComponent } from \"./component/mc-breadcrumbs.component\";\nimport { McBreadcrumbsConfig } from \"./service/mc-breadcrumbs.config\";\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [ McBreadcrumbsComponent ],\n  exports: [ McBreadcrumbsComponent ]\n})\nexport class McBreadcrumbsModule {\n  static forRoot() : ModuleWithProviders {\n    return {\n      ngModule: McBreadcrumbsModule,\n      providers: [\n        McBreadcrumbsService,\n        McBreadcrumbsConfig\n      ]\n    };\n  }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","undefined","useDeprecatedSynchronousErrorHandling","value","Error","stack","hostReportError","err","setTimeout","empty","closed","next","error","complete","isObject","tryCatchTarget","tryCatcher","apply","arguments","e","errorObject","tryCatch","fn","UnsubscriptionErrorImpl","errors","call","message","length","map","i","toString","join","name","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","concat","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","Symbol","Math","random","Subscriber","_super","destinationOrNext","_this","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","emptyObserver","SafeSubscriber","tslib_1.__extends","rxSubscriberSymbol","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","pipe","fns","_i","pipeFromArray","input","prev","noop","Observable","subscribe","_isScalar","_subscribe","lift","operator","observable","source","sink","toSubscriber","nextOrObserver","_trySubscribe","canReportError","observer","_a","closed_1","console","warn","forEach","promiseCtor","getPromiseCtor","resolve","reject","Symbol_observable","operations","toPromise","ObjectUnsubscribedErrorImpl","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","AnonymousSubject","ObjectUnsubscribedError","copy","slice","thrownError","asObservable","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","getSubject","_subject","_isComplete","higherOrderRefCount","GroupDurationSubscriber","GroupBySubscriber","keySelector","elementSelector","durationSelector","subjectSelector","groups","attemptedToUnsubscribe","key","_group","Map","element","group","get","set","groupedObservable","GroupedObservable","duration","clear","removeGroup","delete","count","groupSubject","refCountSubscription","InnerRefCountSubscription","BehaviorSubject","_value","defineProperty","getValue","configurable","AsyncAction","scheduler","work","schedule","state","delay","id","recycleAsyncId","pending","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action","QueueAction","Scheduler","SchedulerAction","now","AsyncScheduler","delegate","active","scheduled","action","shift","queue","QueueScheduler","empty$1","emptyScheduled","isScheduler","subscribeToArray","array","fromArray","of","args","pop","scalar","result","dispatch","Notification","kind","hasValue","observe","do","accept","toObservable","throwError","createNext","undefinedValueNotification","createError","createComplete","completeNotification","ObserveOnSubscriber","arg","notification","scheduleMessage","ObserveOnMessage","ReplayEvent","ReplaySubject","bufferSize","windowTime","Number","POSITIVE_INFINITY","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextTimeWindow","nextInfiniteTimeWindow","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","time","max","nextHandle","AsyncSubject","hasNext","hasCompleted","tasksByHandle","Immediate","cb","handle","then","runIfPresent","AsapAction","asap","AsapScheduler","AnimationFrameAction","requestAnimationFrame","cancelAnimationFrame","VirtualAction","AnimationFrameScheduler","VirtualTimeScheduler","maxFrames","frame","frameTimeFactor","sort","sortActions","a","identity","ArgumentOutOfRangeErrorImpl","EmptyErrorImpl","MapOperator","project","thisArg","MapSubscriber","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","subscribeToPromise","promise","iterator","getSymbolIterator","subscribeToIterable","iterable","Symbol_iterator","item","done","return","subscribeToObservable","obj","obs","TypeError","isPromise","subscribeTo","isArrayLike","subscribeToResult","outerSubscriber","NONE","CombineLatestSubscriber","resultSelector","values","observables","toRespond","unused","oldVal","_tryResultSelector","from","isInteropObservable","fromObservable","fromPromise","isIterable","fromIterable","mergeMap","concurrent","ii","MergeMapOperator","MergeMapSubscriber","buffer","_tryNext","_innerSub","ish","innerSubscriber","concatAll","mergeAll","ForkJoinSubscriber","sources","completed","haveValues","innerSubscription","_hasValue","RaceSubscriber","hasFirst","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryresultSelector","nextResult","isComplete","_","template","templateSettings","wrapIntoObservable","isPromise$1","interpolate","McBreadcrumbsConfig","decorators","type","Injectable","ctorParameters","McBreadcrumbsResolver","route","data","routeConfig","path","getFullPath","text","breadcrumbs","stringFormat","binding","compiled","pathFromRoot","v","url","Context","AuditSubscriber","throttled","clearThrottle","BufferSubscriber","closingNotifier","BufferCountSubscriber","BufferSkipCountSubscriber","startBufferEvery","buffers","BufferTimeSubscriber","bufferTimeSpan","bufferCreationInterval","maxBufferSize","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","context_1","onBufferFull","context_2","closeContext","prevContext","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","selector","caught","err2","concat$1","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","emitValue","durationSubscription","DebounceTimeSubscriber","dueTime","lastValue","clearDebounce","debouncedSubscription","dispatchNext","debouncedNext","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","DelayMessage","DelaySubscriber","delay_1","_schedule","scheduleNotification","SubscriptionDelaySubscriber","DelayWhenSubscriber","delayDurationSelector","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","subscribeToSource","sourceSubscribed","DeMaterializeSubscriber","DistinctOperator","flushes","DistinctSubscriber","Set","_useKeySelector","_finalizeNext","has","DistinctUntilChangedSubscriber","compare","hasKey","y","Boolean","filter","FilterOperator","FilterSubscriber","DoOperator","TapSubscriber","_tapNext","_tapError","_tapComplete","throwIfEmpty","errorFactory","defaultErrorFactory","tap","TakeOperator","total","ArgumentOutOfRangeError","TakeSubscriber","EverySubscriber","everyValueMatch","SwitchFirstSubscriber","hasSubscription","ExhaustMapSubscriber","tryNext","ExpandSubscriber","subscribeToProjection","FinallySubscriber","callback","FindValueSubscriber","yieldIndex","first","hasDefaultValue","take","EmptyError","IgnoreElementsSubscriber","IsEmptySubscriber","takeLast","TakeLastOperator","TakeLastSubscriber","ring","idx","MapToSubscriber","MaterializeSubscriber","scan","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","enumerable","MergeScanSubscriber","acc","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","period","dispatchNotification","SequenceEqualSubscriber","compareTo","comparor","_b","_oneComplete","emit","checkValues","areEqual","nextB","completeB","SequenceEqualCompareToSubscriber","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","skipCount","_ring","currentIndex","oldValue","SkipUntilSubscriber","SkipWhileSubscriber","skipping","tryCallPredicate","SubscribeOnObservable","delayTime","isNumeric","val","parseFloat","SwitchMapSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","ThrottleSubscriber","_leading","_trailing","_sendValue","_throttled","send","throttle","tryDurationSelector","throttlingDone","ThrottleTimeSubscriber","leading","trailing","_hasTrailingValue","_trailingValue","TimeoutWithSubscriber","absoluteTimeout","waitFor","withObservable","scheduleTimeout","dispatchTimeout","toArrayReducer","arr","toArray","WindowSubscriber","window","openWindow","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","WindowToggleSubscriber","context_3","context_4","inner","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","_tryProject","McBreadcrumbsService","_router","_config","_injector","_breadcrumbs","_defaultResolver","events","NavigationEnd","event","currentRoot","routerState","snapshot","root","_resolveCrumbs","flatMap","distinct","postProcess","crumbs$","firstChild","Router","ActivatedRoute","Injector","McBreadcrumbsComponent","service","ngOnInit","crumbs","ngOnDestroy","Component","McBreadcrumbsModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","RouterModule","declarations","exports"],"mappings":"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"}
